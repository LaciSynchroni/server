services:
  postgres:
    image: docker.io/postgres:18
    command: ["postgres", "-c", "log_statement=all"]
    restart: always
    environment:
      POSTGRES_DB: "${LACI_POSTGRES_DB}"
      POSTGRES_USER: "${LACI_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${LACI_POSTGRES_PASSWORD}"
    volumes:
      - postgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LACI_POSTGRES_USER} -d ${LACI_POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: docker.io/redis:latest
    command: [sh, -c, "rm -f /data/dump.rdb && redis-server --save \"\" --appendonly no --requirepass ${LACI_REDIS_PASSWORD}"]
    volumes:
      - cache:/data

  laci-server:
    image: lacisynchroni/server:latest
    pull_policy: build
    build:
      context: ../..
      target: server
    restart: on-failure
    environment:
      LaciSynchroni__ServerName: "${LACI_SERVER_NAME}"
      LaciSynchroni__ServerPublicUri: "${LACI_PUBLIC_URI}"
      LaciSynchroni__CdnFullUrl: "${LACI_CDNURL}"
      LaciSynchroni__Jwt: "${LACI_JWT}"
      LaciSynchroni__JwtKeyId: "${LACI_JWT_KEY_ID}"
      LaciSynchroni__RedisConnectionString: "redis,password=${LACI_REDIS_PASSWORD}"
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${LACI_POSTGRES_DB};Username=${LACI_POSTGRES_USER};Password=${LACI_POSTGRES_PASSWORD};Keepalive=15;Minimum Pool Size=10;Maximum Pool Size=50;No Reset On Close=true;Max Auto Prepare=50;Enlist=false"
      DOTNET_USE_POLLING_FILE_WATCHER: 1
    volumes:
      - ../config/standalone/base.appsettings.json:/opt/LaciSynchroni/Server/base.appsettings.json
      - ../config/standalone/server.appsettings.json:/opt/LaciSynchroni/Server/appsettings.json
      - ../log/server-standalone/:/opt/LaciSynchroni/Server/logs/:rw
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-c", "exec 3<>/dev/tcp/localhost/6000;echo -e \"GET /health HTTP/1.1\r\nhost: localhost:6000\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      retries: 60
      start_period: 10s
      timeout: 1s

  laci-services:
    image: lacisynchroni/services:latest
    pull_policy: build
    build:
      context: ../..
      target: services
    restart: on-failure
    environment:
      LaciSynchroni__DiscordBotToken: "${LACI_DISCORD_TOKEN}"
      LaciSynchroni__Jwt: "${LACI_JWT}"
      LaciSynchroni__JwtKeyId: "${LACI_JWT_KEY_ID}"
      LaciSynchroni__RedisConnectionString: "redis,password=${LACI_REDIS_PASSWORD}"
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${LACI_POSTGRES_DB};Username=${LACI_POSTGRES_USER};Password=${LACI_POSTGRES_PASSWORD};Keepalive=15;Minimum Pool Size=10;Maximum Pool Size=50;No Reset On Close=true;Max Auto Prepare=50;Enlist=false"
      DOTNET_USE_POLLING_FILE_WATCHER: 1
    volumes:
      - ../config/standalone/base.appsettings.json:/opt/LaciSynchroni/Services/base.appsettings.json
      - ../config/standalone/services.appsettings.json:/opt/LaciSynchroni/Services/appsettings.json
      - ../log/services-standalone/:/opt/LaciSynchroni/Services/logs/:rw
    depends_on:
      laci-server:
        condition: service_healthy
      postgres:
        condition: service_healthy

  laci-auth:
    image: lacisynchroni/authservice:latest
    pull_policy: build
    build:
      context: ../..
      target: authservice
    restart: on-failure
    environment:
      LaciSynchroni__PublicOAuthBaseUri: "${LACI_PUBLIC_OAUTH_BASE_URI}"
      LaciSynchroni__DiscordOAuthClientSecret: "${LACI_DISCORD_OAUTH_CLIENT_SECRET}"
      LaciSynchroni__DiscordOAuthClientId: "${LACI_DISCORD_OAUTH_CLIENT_ID}"
      LaciSynchroni__Jwt: "${LACI_JWT}"
      LaciSynchroni__JwtKeyId: "${LACI_JWT_KEY_ID}"
      LaciSynchroni__RedisConnectionString: "redis,password=${LACI_REDIS_PASSWORD}"
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${LACI_POSTGRES_DB};Username=${LACI_POSTGRES_USER};Password=${LACI_POSTGRES_PASSWORD};Keepalive=15;Minimum Pool Size=10;Maximum Pool Size=50;No Reset On Close=true;Max Auto Prepare=50;Enlist=false"
      DOTNET_USE_POLLING_FILE_WATCHER: 1
    volumes:
      - ../config/standalone/base.appsettings.json:/opt/LaciSynchroni/AuthService/base.appsettings.json
      - ../config/standalone/authservice.appsettings.json:/opt/LaciSynchroni/AuthService/appsettings.json
      - ../log/authservice-standalone/:/opt/LaciSynchroni/AuthService/logs/:rw
    depends_on:
      laci-server:
        condition: service_healthy
      postgres:
        condition: service_healthy

  laci-files:
    image: lacisynchroni/staticfilesserver:latest
    pull_policy: build
    build:
      context: ../..
      target: staticfilesserver
    restart: on-failure
    environment:
      LaciSynchroni__CdnFullUrl: "${LACI_CDNURL}"
      LaciSynchroni__Jwt: "${LACI_JWT}"
      LaciSynchroni__JwtKeyId: "${LACI_JWT_KEY_ID}"
      LaciSynchroni__RedisConnectionString: "redis,password=${LACI_REDIS_PASSWORD}"
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${LACI_POSTGRES_DB};Username=${LACI_POSTGRES_USER};Password=${LACI_POSTGRES_PASSWORD};Keepalive=15;Minimum Pool Size=10;Maximum Pool Size=50;No Reset On Close=true;Max Auto Prepare=50;Enlist=false"
      DOTNET_USE_POLLING_FILE_WATCHER: 1
    volumes:
      - ../config/standalone/base.appsettings.json:/opt/LaciSynchroni/StaticFilesServer/base.appsettings.json
      - ../config/standalone/files.appsettings.json:/opt/LaciSynchroni/StaticFilesServer/appsettings.json
      - ../log/files-standalone/:/opt/LaciSynchroni/StaticFilesServer/logs/
      - static_files_cache:/opt/LaciSynchroni/StaticFilesServer/data/
    depends_on:
      postgres:
        condition: service_healthy
      laci-server:
        condition: service_healthy

  prometheus:
    image: docker.io/prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - prometheus:/prometheus
      - ../config/standalone/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: docker.io/grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: "${LACI_GF_SECURITY_ADMIN_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${LACI_GF_SECURITY_ADMIN_PASSWORD}"
    depends_on:
      - prometheus
    volumes:
      - grafana:/var/lib/grafana
    user: "1000:1000"

  cloudflared:
    image: docker.io/cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel run
    environment:
      TUNNEL_TOKEN: "${LACI_CLOUDFLARED_TOKEN}"
    user: "1000:1000"

volumes:
  cache:
    driver: local
  postgresql:
  static_files_cache:
  prometheus:
  grafana:
